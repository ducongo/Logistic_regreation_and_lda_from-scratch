# -*- coding: utf-8 -*-
"""KFold

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KLh8HPkfH3Yqlrv3N9s2LD1j9wf3GHu_
"""

import numpy as np

class KFold:

    def __init__(self,n_splits=10):
        self.n_splits = n_splits

    def split(self, sample):
        try:
            if type(sample) != type(np.array([])) and type(sample) == type([]):
                sample = np.array(sample)
            indexes = [i for i in range(0, sample.shape[0])]
            test_len = int(len(indexes) / self.n_splits)
            set_sample = set(indexes)
            self.indexes = indexes
            num_of_folds = 1
            test_indexes = None
            terminate = False
            for i in range(0, len(indexes), test_len):
  
                if num_of_folds == self.n_splits:
                    test_indexes = [j for j in range(i, len(indexes))]
                    terminate = True
                else:
                    test_indexes = [j for j in range(i, i + test_len)]
                train_indexes = list(set_sample - set(test_indexes))
                num_of_folds += 1
                yield (np.array(train_indexes), np.array(test_indexes))

                if terminate:
                    break
                
        except Exception as e:
            print(e)
